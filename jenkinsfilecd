def url
def response
def commitId
pipeline {
  agent any
  parameters {
    string(name:'COMMIT_ID', defaultValue: '', description: '')
  }
  environment {
    GROUP_ID = 'quantum.solutions.io'
    ARTIFACT_ID = 'next-gen-radio'
    NEXUS_URL = 'http://172.20.0.10:8081'
    REPOSITORY = 'maven-releases'
    NEXUS_REGISTRY = '172.20.0.10:8082/'
    NEXUS_CREDENTIALS = credentials('nexus-jenkins')
    NEXUS_USERNAME = 'wissem'
    NEXUS_PASSWORD = 'wissem'
  }
  stages {
      stage('Check Nexus Tag') {
      steps {
        script {
          commitId = 'params.COMMIT_ID'
          echo "Commit ID: ${params.COMMIT_ID}"
          url = "${NEXUS_URL}/repository/maven-releases/quantum/solutions/io/next-gen-radio/${params.COMMIT_ID}/next-gen-radio-${params.COMMIT_ID}.zip"
          response = sh(script: "curl -sS -X GET ${url}", returnStdout: true)    
          echo "response: ${response}"     
          if (response.contains("404 - Nexus Repository Manager")) {
            error "Version tag '${params.COMMIT_ID}' does not exist in Nexus for artifact '${GROUP_ID}:${ARTIFACT_ID}'"
          } 
          else {
             echo "Version tag '${params.COMMIT_ID}' exists in Nexus for artifact '${GROUP_ID}:${ARTIFACT_ID}'"
          }
        }
      }
      post {
        success {
          slackSend (color: 'good', message: "check to nexus with '${params.COMMIT_ID}' succeeded!")
        }
        failure {
          slackSend (color: 'danger', message:"check to nexus with '${params.COMMIT_ID}' failed!")
        }
      }
    }
    stage('pull code from Nexus') {
      steps {
        script {
          url = "${NEXUS_URL}/repository/maven-releases/quantum/solutions/io/next-gen-radio/${params.COMMIT_ID}/next-gen-radio-${params.COMMIT_ID}.zip"
          sh "curl -L -o project.zip ${url}"  
        }
      }
      post {
        success {
          slackSend (color: 'good', message: "pull from nexus  succeeded!")
        }
        failure {
          slackSend (color: 'danger', message: "pull from nexus   failed!")
        }
      }
    }
    stage ('unzip') {
      steps {
        sh "apt-get install unzip"
        sh "unzip -t  project.zip"
      }
      post {
        success {
          slackSend (color: 'good', message: "unzip succeeded!")
        }
        failure {
          slackSend (color: 'danger', message: "unzip   failed!")
        }
      } 
    }
    stage('Build Docker Image') {
      steps {
        sh 'docker build -f dockerfile -t hamza:'${commitId}' .'
      }
      post {
        success {
          slackSend (color: 'good', message: "Build Docker Image succeeded!")
        }
        failure {
          slackSend (color: 'danger', message: "Build Docker Image  failed!")
        }
      }
    }
    stage('Push to Nexus') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'nexus-jenkins', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
          sh "docker login -u wissem  --password wissem 172.20.0.10:8082/repository/dockerhosted-repo"
          sh "docker tag hamza:${commitId} 172.20.0.10:8082/repository/dockerhosted-repo/hamza:${commitId}"
          sh "docker push 172.20.0.10:8082/repository/dockerhosted-repo/hamza:${commitId}"
        }
      }
      post {
        success {
          slackSend (color: 'good', message: "Push image to Nexus  succeeded!")
        }
        failure {
          slackSend (color: 'danger', message: "Push image to Nexus failed!")
        }
      }
    }
  }
  post {
    always { 
      cleanWs()
    }
    success {
      slackSend channel: '#jenkins-alerts-pfe-2023', message: " deploy ${currentBuild.result} for job ${env.JOB_NAME} #${env.BUILD_NUMBER} (duration: ${currentBuild.durationString}). Check out the deploy at ${env.BUILD_URL}"
      emailext (
        to: 'wissemsghaier2000@gmail.com',
        subject: "Job '${env.JOB_NAME}'",
        body: "deploy  ${currentBuild.result} for job  ${env.JOB_NAME} at  ${env.BUILD_URL} and the build number $BUILD_NUMBER"
      )
    }
    failure {
      slackSend channel: '#jenkins-alerts-pfe-2023', message: "deploy ${currentBuild.result} for ${env.JOB_NAME} #${env.BUILD_NUMBER} (duration: ${currentBuild.durationString}). Check out the deploy at ${env.BUILD_URL}"
      emailext (
        to: 'wissemsghaier2000@gmail.com',
        subject: "Job '${env.JOB_NAME}'",
        body: "deploy  ${currentBuild.result} for job  ${env.JOB_NAME} at  ${env.BUILD_URL} and the build number $BUILD_NUMBER"
      )  
    } 
  }
}

