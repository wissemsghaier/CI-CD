def url
def response
def params.COMMIT_ID
pipeline {
  agent any
  environment {
    GROUP_ID = 'quantum.solutions.io'
    ARTIFACT_ID = 'next-gen-radio'
    NEXUS_URL = 'http://172.20.0.3:8081'
    REPOSITORY = 'maven-releases'
    NEXUS_REGISTRY = 'http://172.20.0.3:8082/repository/dockerhosted-repo/quantum/solution/next'
    NEXUS_CREDENTIALS = credentials('nexus-jenkins')
    IMAGE_NAME = 'laravel'
    IMAGE_TAG = 'app'
  }
  stages {
    stage('Check Nexus Tag') {
      steps {
        script {
          url = "${NEXUS_URL}/repository/maven-releases/quantum/solutions/io/next-gen-radio/${params.COMMIT_ID}/next-gen-radio-${params.COMMIT_ID}.zip"
          response = sh(script: "curl -sS ${url}", returnStdout: true)
          if (response.contains("${params.COMMIT_ID}")) {
            echo "Version tag '${params.COMMIT_ID}' exists in Nexus for artifact '${GROUP_ID}:${ARTIFACT_ID}'"
          } 
          else {
            error "Version tag '${params.COMMIT_ID}' does not exist in Nexus for artifact '${GROUP_ID}:${ARTIFACT_ID}'"
          }
        }
      }
    }
    stage('pull code from Nexus') {
      steps {
        script {
          url = "${NEXUS_URL}/repository/maven-releases/quantum/solutions/io/next-gen-radio/${params.COMMIT_ID}/next-gen-radio-${params.COMMIT_ID}.zip"
          sh "curl -L -o project.zip ${url}"  
        }
      }
    }
    stage ('unzip') {
      steps {
        sh "apt-get install unzip"
        sh "unzip -t  project.zip"
      } 
    }
    stage('Build Docker Image') {
      steps {
        // clone repository and build Docker image
        sh 'docker build -t laravel:app .'
      }
    }
    stage('Push to Nexus') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'nexus-jenkins', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
          sh "docker login -u wissem --password wissem ${NEXUS_REGISTRY}"
          sh "docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${NEXUS_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
          sh "docker push ${NEXUS_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
        }
      }
    }
  }
  post {
    always { 
      cleanWs()
    } 
  }
}


