def COMMIT_ID
 pipeline {
   agent any  
   stages {
     stage ("started "){
       steps {
         slackSend channel: "#jenkins-alerts-pfe-2023", message: " STARTED:job  '${env.JOB_NAME} ${env.BUILD_NUMBER}' (${env.BUILD_URL})"
       }
     }  
     stage('Checkout') {
       steps {
         script {
           checkout([$class: 'GitSCM',
             branches: [[name: "main"]],
             doGenerateSubmoduleConfigurations: false,
             extensions: [],
             submoduleCfg: [],
             userRemoteConfigs: [[credentialsId: 'jenkins-scm', url: 'https://gitlab.quantum-solutions.xyz/devops/pfe-2023/project_laravel.git']]
           ]) 
           sh "git rev-parse --short HEAD > commit_hash.txt"
           COMMIT_ID = readFile('commit_hash.txt').trim()
           echo "Commit Hash: ${COMMIT_ID}"
         }          
       }
       post {
         success {
           slackSend (color: 'good', message: "checkout of pipeline  succeeded!")
         }
         failure {
           slackSend (color: 'danger', message: "checkout  of pipeline  failed!")
         }
       }
     }
     stage('install packages') {
       steps {
         //sh "composer update"
         sh "composer install"
         
       }
       post {
         success {
           slackSend (color: 'good', message: "install packages of pipeline  succeeded!")
         } 
         failure {
           slackSend (color: 'danger', message: "install packages of pipeline  failed!")
         }
       }
     } 
  
     stage ('pre-configure'){
       steps{
         sh 'cp .env.example .env'
         sh 'php artisan key:generate'
       }
       post {
         success {
           slackSend (color: 'good', message: "pre-configure of pipeline  succeeded!")
         }
         failure {
           slackSend (color: 'danger', message: "pre-configure of pipeline  failed!")
         }
       }
     }      
     stage('test') {
       steps { 
         sh "php artisan test "
         sh './vendor/bin/phpunit'
       } 
       post {
         success {
           slackSend (color: 'good', message: "Test of pipeline  succeeded!")
         }
         failure {
           slackSend (color: 'danger', message: "Test of pipeline  failed!")
         }
       } 
     }
     stage('Code Quality Check via SonarQube') {
       steps {
         script {
           def scannerHome = tool 'sonarqube-scanner';
           withSonarQubeEnv("SonarQube") {
              sh "${tool("sonarqube-scanner")}/bin/sonar-scanner \
              -Dsonar.projectName=project_laravel12\
              -Dsonar.projectKey=project_laravel12 \
              -Dsonar.sources=. \
              -Dsonar.host.url=http://172.20.0.1:9001/  \
              -Dsonar.login=squ_e798c50ee42eb24e478af95e51491fd9e75bcc5e"
           }
         }
       }
       post {
         success {
           slackSend (color: 'good', message: "Code Quality of pipeline  succeeded!")
         }
         failure {
           slackSend (color: 'danger', message: "Code Qualityof pipeline  failed!")
         }
       }
     }
     stage("Quality Gate") {
       steps {
         sleep 60
         waitForQualityGate abortPipeline: true
       }
       post {
         success {
           slackSend (color: 'good', message: "Quality Gate of pipeline  succeeded!")
         }
         failure {
           slackSend (color: 'danger', message: "Quality Gate of pipeline  failed!")
         } 
       }
     } 
     stage(" Publish to Nexus Repository Manager") {
       steps {
         sh "apt-get install zip"
         sh "zip -r project_laravel.zip ."
         sh "curl -v -u wissem:wissem --upload-file project_laravel.zip  http://172.20.0.10:8081/repository/maven-releases/quantum/solutions/io/next-gen-radio/${COMMIT_ID}/next-gen-radio-${COMMIT_ID}.zip"
       }
       post {
         success {
           slackSend (color: 'good', message: " Publish to Nexus of pipeline  succeeded!")
         }
         failure {
           slackSend (color: 'danger', message: " Publish to Nexus of pipeline  failed!")
         }
       }  
     }
   }  
   post {
     always {      
       cleanWs()      
     }  
     success {
       slackSend channel: '#jenkins-alerts-pfe-2023', message: " build ${currentBuild.result} for job ${env.JOB_NAME} #${env.BUILD_NUMBER} (duration: ${currentBuild.durationString}). Check out the build at ${env.BUILD_URL}"
       emailext (
         to: 'wissemsghaier2000@gmail.com',
         subject: "Job '${env.JOB_NAME}'",
         body: "build ${currentBuild.result} for job  ${env.JOB_NAME} at  ${env.BUILD_URL} and the build number $BUILD_NUMBER"
       )
     }
     failure {
       slackSend channel: '#jenkins-alerts-pfe-2023', message: "Build ${currentBuild.result} for ${env.JOB_NAME} #${env.BUILD_NUMBER} (duration: ${currentBuild.durationString}). Check out the build at ${env.BUILD_URL}"
       emailext (
         to: 'wissemsghaier2000@gmail.com',
         subject: "Job '${env.JOB_NAME}'",
         body: "build ${currentBuild.result} for job  ${env.JOB_NAME} at  ${env.BUILD_URL} and the build number $BUILD_NUMBER"
       )  
     }
   }
 }       
